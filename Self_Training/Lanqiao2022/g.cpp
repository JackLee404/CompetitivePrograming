#include <iostream>

using i64 = long long;

const int mod = 1e9 + 7, N = 1e7 + 10;
/*
	f[i][j] 表示第i列的状态为j时的总方案数 (并且前i - 1列已经摆好)

	f[i][0] 表示第i列没有方格

	f[i][1] 表示第i列为上方方格一个

	f[i][2] 表示第i列为下方方格一个

	f[i][3] 表示第i列全方格


	f[i][0] = f[i - 1][3];

	f[i][1] = f[i - 1][0] + f[i - 1][2];

	f[i][2] = f[i - 1][0] + f[i - 1][1];

	f[i][3] = f[i - 1][0] + f[i - 1][1] + f[i - 1][2] + f[i - 1][3];
*/

int f[5][5];

int main() {
	int n;

	std::cin >> n;

	f[0][3] = 1;

	for(int i = 1; i <= n; i ++) {
		f[i & 1][0] = f[i - 1 & 1][3];

		f[i & 1][1] = ((i64)f[i - 1 & 1][0] + f[i - 1 & 1][2]) % mod;

		f[i & 1][2] = ((i64)f[i - 1 & 1][0] + f[i - 1 & 1][1]) % mod;

		f[i & 1][3] = (((i64)f[i - 1 & 1][0] + f[i - 1 & 1][1]) % mod + ((i64)f[i - 1 & 1][2] + f[i - 1 & 1][3])) % mod;
	}

	std::cout << f[n & 1][3];
}